import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CallbackQueryHandler, MessageHandler, ContextTypes, CommandHandler, filters

from gpt import ChatGptService
from util import (
    load_message,
    send_text,
    send_image,
    show_main_menu,
    default_callback_handler,
    send_text_buttons,
    load_prompt,
    Dialog
)

load_dotenv()
GPT_TOKEN = os.getenv("GPT_TOKEN")
TG_TOKEN = os.getenv("TG_TOKEN")

async def msg_switcher(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ –†–æ—É—Ç–µ—Ä –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞ –≤ –Ω—É–∂–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π """
    actions = {
        'gpt': gpt_msg,
        'talk': talk_msg,
        'quiz': quiz,
    }
    await actions.get(dialog.mode, start)(update, context)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Ç–≥ –±–æ—Ç–∞ """
    dialog.mode = 'main'
    text = load_message('main')
    await send_image(update, context, 'main')
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        'start': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'random': '–£–∑–Ω–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üß†',
        'gpt': '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT ü§ñ',
        'talk': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é üë§',
        'quiz': '–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ ‚ùì'
    })

async def random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /random —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞ –∏–∑ gpt """
    dialog.mode = 'random'
    text = load_message('random')
    await send_image(update, context, 'random')
    await send_text(update, context, text)
    msg = await send_text(update, context, '–ß–∞—Ç —à–µ–≤–µ–ª–∏—Ç –º–∏–∫—Ä–æ—Å—Ö–µ–º–∞–º–∏...')
    prompt = load_prompt('random')
    answer = await chat_gpt.add_message(prompt)
    await msg.edit_text(answer)
    await send_text_buttons(update, context, '–ñ–∂—ë–º –¥–∞–ª—å—à–µ –∏–ª–∏ —Ö–æ—Ä–æ—à?', {'random_again': '–•–æ—á—É –µ—â—ë —Ñ–∞–∫—Ç', 'random_stop': '–ó–∞–∫–æ–Ω—á–∏—Ç—å'})

async def random_btn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ —Å–ª—É—á–∞–π–Ω–æ–º —Ñ–∞–∫—Ç–µ. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–∫—Ç –∏–ª–∏ –≤—ã—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é """
    if update.callback_query.data == 'random_again':
        await random(update, context)
    else:
        await start(update, context)

async def gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /gpt, —Ç—É—Ç –º—ã –æ–±—â–∞–µ–º—Å—è —Å –≤–µ–ª–∏–∫–∏–º –∏ –º–æ–≥—É—á–∏–º –ò–ò """
    print('gpt', update.message.text if update.message else 'no msg')
    dialog.mode = 'gpt'
    text = load_message('gpt')
    await send_image(update, context, 'gpt')
    await send_text(update, context, text)

async def gpt_msg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ /gpt —Ä–∞–∑–¥–µ–ª–µ —á–∞—Ç–∞ """
    print('gpt_msg', update.message.text if update.message else 'no msg')
    msg = await send_text(update, context, '–ß–∞—Ç —à–µ–≤–µ–ª–∏—Ç –º–∏–∫—Ä–æ—Å—Ö–µ–º–∞–º–∏...')
    prompt = load_prompt('gpt')
    answer = await chat_gpt.send_question(prompt, update.message.text)
    await msg.edit_text(answer)

async def talk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /talk """
    dialog.mode = 'talk'
    print('talk', update.message.text if update.message else 'no msg')

async def talk_msg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ /talk —Ä–∞–∑–¥–µ–ª–µ —á–∞—Ç–∞ """
    print('talk_msg', update.message.text if update.message else 'no msg')

async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /quiz """
    dialog.mode = 'quiz'
    print('quiz', update.message.text if update.message else 'no msg')

dialog = Dialog()
dialog.mode = 'start'

chat_gpt = ChatGptService(GPT_TOKEN)
app = ApplicationBuilder().token(TG_TOKEN).build()

app.add_handler(CommandHandler('start', start))
app.add_handler(CommandHandler('random', random))
app.add_handler(CommandHandler('gpt', gpt))
app.add_handler(CommandHandler('talk', talk))
app.add_handler(CommandHandler('quiz', quiz))

app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, msg_switcher))

# –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–±—ç–∫–∞ –º–æ–∂–Ω–æ —Ç–∞–∫:
app.add_handler(CallbackQueryHandler(random_btn, pattern='^random_.*'))
app.add_handler(CallbackQueryHandler(default_callback_handler))
app.run_polling()
