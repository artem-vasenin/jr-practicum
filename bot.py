import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CallbackQueryHandler, MessageHandler, ContextTypes, CommandHandler, filters

from gpt import ChatGptService
from util import (
    load_message,
    send_text,
    send_image,
    show_main_menu,
    default_callback_handler,
    send_text_buttons,
    load_prompt,
    Dialog
)


load_dotenv()
GPT_TOKEN = os.getenv("GPT_TOKEN")
TG_TOKEN = os.getenv("TG_TOKEN")


async def msg_switcher(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ –†–æ—É—Ç–µ—Ä –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞ –≤ –Ω—É–∂–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π """
    actions = {
        'gpt': gpt_msg,
        'talk': talk_msg,
        'quiz': quiz_msg,
        'translate': translate_msg,
    }
    await actions.get(dialog.mode, start)(update, context)


def clear_dialog():
    """ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–µ–π—Ç–∞ """
    dialog.mode = 'start'
    dialog.lang = None
    dialog.quiz = None
    dialog.quiz_qty = [0, 0]


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Ç–≥ –±–æ—Ç–∞ """
    clear_dialog()
    text = load_message('main')
    await send_image(update, context, 'main')
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        'start': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'random': '–£–∑–Ω–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üß†',
        'gpt': '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT ü§ñ',
        'talk': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é üë§',
        'quiz': '–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ ‚ùì',
        'translate': '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ñ—Ä–∞–∑—É üá¨üáß'
    })


async def random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /random —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞ –∏–∑ gpt """
    clear_dialog()
    dialog.mode = 'random'
    text = load_message('random')
    await send_image(update, context, 'random')
    msg = await send_text(update, context, text)
    prompt = load_prompt('random')
    answer = await chat_gpt.add_message(prompt)
    await msg.edit_text(answer)
    await send_text_buttons(update, context, '–ï—â–µ –æ–¥–∏–Ω —Ñ–∞–∫—Ç?', {'random_gen': '–•–æ—á—É –µ—â—ë —Ñ–∞–∫—Ç', 'random_stop': '–ó–∞–∫–æ–Ω—á–∏—Ç—å'})


async def random_btn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ —Å–ª—É—á–∞–π–Ω–æ–º —Ñ–∞–∫—Ç–µ. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–∫—Ç –∏–ª–∏ –≤—ã—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é """
    if update.callback_query.data == 'random_gen':
        await random(update, context)
    else:
        await start(update, context)


async def gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /gpt, —Ç—É—Ç –º—ã –æ–±—â–∞–µ–º—Å—è —Å –≤–µ–ª–∏–∫–∏–º –∏ –º–æ–≥—É—á–∏–º –ò–ò """
    clear_dialog()
    dialog.mode = 'gpt'
    await send_image(update, context, 'gpt')
    await send_text(update, context, load_message('gpt'))
    chat_gpt.set_prompt(load_prompt('gpt'))


async def gpt_msg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ /gpt —Ä–∞–∑–¥–µ–ª–µ —á–∞—Ç–∞ """
    msg = await send_text(update, context, '–ß–∞—Ç —à–µ–≤–µ–ª–∏—Ç –º–∏–∫—Ä–æ—Å—Ö–µ–º–∞–º–∏...')
    try:
        answer = await chat_gpt.add_message(update.message.text)
        await msg.edit_text(answer)
    except Exception as e:
        print(e)
        await msg.edit_text('–û—à–∏–±–∫–∞. –ß–∞—ÇGPT —Å–ª–µ–≥–∫–∞ –ø—Ä–∏–ª–µ–≥...')


async def talk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /talk """
    clear_dialog()
    dialog.mode = 'talk'
    await send_image(update, context, 'talk')
    await send_text_buttons(update, context, load_message('talk'), {
        'talk_cobain': '–ö—É—Ä—Ç –ö–æ–±–µ–π–Ω - –°–æ–ª–∏—Å—Ç –≥—Ä—É–ø–ø—ã Nirvana üé∏',
        'talk_hawking': '–°—Ç–∏–≤–µ–Ω –•–æ–∫–∏–Ω–≥ - –§–∏–∑–∏–∫ üî¨',
        'talk_nietzsche': '–§—Ä–∏–¥—Ä–∏—Ö –ù–∏—Ü—à–µ - –§–∏–ª–æ—Å–æ—Ñ üß†',
        'talk_queen': '–ï–ª–∏–∑–∞–≤–µ—Ç–∞ II - –ö–æ—Ä–æ–ª–µ–≤–∞ –°–æ–µ–¥–∏–Ω—ë–Ω–Ω–æ–≥–æ –ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞ üëë',
        'talk_tolkien': '–î–∂–æ–Ω –¢–æ–ª–∫–∏–µ–Ω - –ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏ "–í–ª–∞—Å—Ç–µ–ª–∏–Ω –ö–æ–ª–µ—Ü" üìñ',
    })


async def talk_btn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ —Å –ª–∏—á–Ω–æ—Å—Ç—å—é. """
    btn_mode = update.callback_query.data
    await update.callback_query.answer()
    await send_image(update, context, btn_mode)
    chat_gpt.set_prompt(load_prompt(btn_mode))


async def talk_msg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ /talk —Ä–∞–∑–¥–µ–ª–µ —á–∞—Ç–∞ """
    msg = await send_text(update, context, '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤–ø–∞–ª –≤ –∑–∞–¥—É–º—á–∏–≤–æ—Å—Ç—å...')
    try:
        answer = await chat_gpt.add_message(update.message.text)
        await msg.edit_text(answer)
    except Exception as e:
        print(e)
        await msg.edit_text('–û—à–∏–±–∫–∞. –ß–∞—ÇGPT —Å–ª–µ–≥–∫–∞ –ø—Ä–∏–ª–µ–≥...')


async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /quiz """
    clear_dialog()
    dialog.mode = 'quiz'
    buttons = {
        'quiz_prog': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —è–∑—ã–∫–µ python',
        'quiz_math': '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ–æ—Ä–∏—è',
        'quiz_biology': '–ë–∏–æ–ª–æ–≥–∏—è',
    }
    await send_image(update, context, 'quiz')
    await send_text_buttons(update, context, load_message('quiz'), buttons)
    chat_gpt.set_prompt(load_prompt('quiz'))


async def quiz_btn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ. """
    if update.callback_query.data == 'quiz_end':
        await start(update, context)
        return

    btn_mode = update.callback_query.data if not update.callback_query.data == 'quiz_more' else dialog.quiz
    dialog.quiz = btn_mode
    msg = await send_text(update, context, '–ß—Ç–æ –± —Ç–∞–∫–æ–≥–æ —Å–ø—Ä–æ—Å–∏—Ç—å...')
    try:
        answer = await chat_gpt.add_message(btn_mode)
        await msg.edit_text(answer)
    except Exception as e:
        print(e)
        await msg.edit_text('–û—à–∏–±–∫–∞. –ß–∞—ÇGPT —Å–ª–µ–≥–∫–∞ –ø—Ä–∏–ª–µ–≥...')


async def quiz_msg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ. """
    buttons = {
        'quiz_prog': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —è–∑—ã–∫–µ python',
        'quiz_math': '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ–æ—Ä–∏—è',
        'quiz_biology': '–ë–∏–æ–ª–æ–≥–∏—è',
    }
    answer = ''
    try:
        answer = await chat_gpt.add_message(update.message.text)
    except Exception as e:
        print(e)
        await send_text(update, context, '–û—à–∏–±–∫–∞. –ß–∞—ÇGPT —Å–ª–µ–≥–∫–∞ –ø—Ä–∏–ª–µ–≥...')

    if answer == '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!':
        dialog.quiz_qty[0] += 1
    else:
        dialog.quiz_qty[1] += 1

    answer = answer + f'\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {dialog.quiz_qty[0]}, –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {dialog.quiz_qty[1]}'

    await send_text(update, context, answer)
    buttons['quiz_more'] = f'–ü–æ–≤—Ç–æ—Ä–∏—Ç—å: {buttons[dialog.quiz]}'
    buttons['quiz_end'] = '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
    await send_text_buttons(update, context, '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å:', buttons)


async def translate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /translate """
    clear_dialog()
    dialog.mode = 'translate'
    await send_image(update, context, 'translate')
    await send_text_buttons(update, context, load_message('translate'), {
        'translate_en': '–†—É—Å—Å–∫–æ-–ê–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ üá∑üá∫‚û°Ô∏èüá¨üáß',
        'translate_es': '–†—É—Å—Å–∫–æ-–ò—Å–ø–∞–Ω—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ üá∑üá∫‚û°Ô∏èüá™üá∏',
    })


async def translate_btn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–µ. """
    btn_mode = update.callback_query.data
    dialog.lang = btn_mode
    await send_text(update, context, load_message(btn_mode))


async def translate_msg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ """
    text = f'–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å {"–∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ" if dialog.lang == "translate_en" else "–∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ"} –ø—Ä–∏–∑–∞–¥—É–º–∞–ª—Å—è...'
    msg = await send_text(update, context, text)
    prompt = load_prompt(dialog.lang)
    answer = await chat_gpt.send_question(prompt, update.message.text)
    try:
        await msg.edit_text(answer)
    except Exception as e:
        print(e)
        await msg.edit_text('–û—à–∏–±–∫–∞. –ß–∞—ÇGPT —Å–ª–µ–≥–∫–∞ –ø—Ä–∏–ª–µ–≥...')


dialog = Dialog()
dialog.mode = 'start'
dialog.lang = None
dialog.quiz = None
dialog.quiz_qty = [0, 0]

chat_gpt = ChatGptService(GPT_TOKEN)
app = ApplicationBuilder().token(TG_TOKEN).build()

app.add_handler(CommandHandler('start', start))
app.add_handler(CommandHandler('random', random))
app.add_handler(CommandHandler('gpt', gpt))
app.add_handler(CommandHandler('talk', talk))
app.add_handler(CommandHandler('quiz', quiz))
app.add_handler(CommandHandler('translate', translate))

app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, msg_switcher))

app.add_handler(CallbackQueryHandler(random_btn, pattern='^random_.*'))
app.add_handler(CallbackQueryHandler(talk_btn, pattern='^talk_.*'))
app.add_handler(CallbackQueryHandler(quiz_btn, pattern='^quiz_.*'))
app.add_handler(CallbackQueryHandler(translate_btn, pattern='^translate_.*'))
app.add_handler(CallbackQueryHandler(default_callback_handler))
app.run_polling()
